1. 
Before writing any code, let me know if you fully understand the process and what you plan to implement. Let me know if you need any othe files as well.

Do not give me the full code with the edits, only the section/function of code with the changes made. For example if a function was changed, return me the full function, or if a client side component was changed, return me the div for that component. If its a new file, give me the full code. Let me know what files to make the changes in as well.




## Context: Template System Migration
I have migrated my document template system from HTML-based templates to DOCX-based templates with the following key changes:

### OLD System (HTML-based):
- Templates stored HTML content in `html_content` column
- Custom fields defined in `custom_fields` JSONB column
- Placeholder format: `{{field_name}}`
- Document generation via HTML processing

### NEW System (DOCX-based):
- Templates store original DOCX files in Supabase storage bucket
- Placeholders detected from DOCX and stored in `detected_placeholders` JSONB column
- Placeholder format: `{field_name}` (single braces)
- Document generation via Docxtemplater service with perfect formatting preservation

## Database Schema (Key Tables):
```sql
-- Templates now use detected_placeholders instead of custom_fields
CREATE TABLE document_templates (
  id uuid PRIMARY KEY,
  name varchar NOT NULL,
  docx_file_path text,
  detected_placeholders jsonb, -- NEW: Array of {name, field} objects
  custom_fields jsonb,         -- OLD: May still exist but deprecated
  status varchar DEFAULT 'draft'
);

-- Tasks reference templates and store custom field values
CREATE TABLE tasks (
  id uuid PRIMARY KEY,
  template_ids uuid[],
  custom_field_values jsonb DEFAULT '{}',
  -- other fields...
);

-- Client fields (auto-populated, don't need user input)
CREATE TABLE clients (
  first_name varchar, last_name varchar, email varchar,
  phone varchar, address_line_1 varchar, city varchar,
  -- other standard client fields...
);
```

## Key Components and Services:

### 1. Client Field Detection Utility:
```javascript
// src/lib/utils/clientFields.js
const CLIENT_FIELDS = ['first_name', 'last_name', 'email', 'phone', 'address_line_1', 'city', 'state', 'postal_code', 'country', 'date_of_birth', 'occupation', 'company', 'full_name', 'current_date', 'current_year']

export function isClientField(fieldName) {
  return CLIENT_FIELDS.includes(fieldName)
}

export function getCustomPlaceholders(detectedPlaceholders = []) {
  return detectedPlaceholders
    .filter(placeholder => !isClientField(placeholder.name))
    .map(placeholder => ({
      name: placeholder.name,
      label: placeholder.field?.label || formatFieldLabel(placeholder.name),
      type: 'text',
      required: true,
      category: placeholder.field?.category || 'document'
    }))
}
```

### 2. Document Generation Service:
```javascript
// Uses DocxtemplaterService.generateDocument(templateId, clientId, customFieldValues)
// Returns DOCX buffer for download instead of HTML/JSON
```

### 3. Data Structure Changes:
```javascript
// OLD: template.custom_fields = [{name, label, type, required}]
// NEW: template.detected_placeholders = [{name: "field_name", field: {name, label, category}}]

// Convert detected_placeholders to custom fields format:
const customFields = getCustomPlaceholders(template.detected_placeholders)
```

## TASK: Update Tasks Feature

### Current Tasks Feature Issues:
The Tasks feature currently uses the old `template.custom_fields` system for handling placeholder values. It needs to be updated to use the new `template.detected_placeholders` system while maintaining all existing functionality.

### Requirements:

1. **Data Source Change**: 
   - Replace all references to `template.custom_fields` with `template.detected_placeholders`
   - Filter out client fields (these are auto-populated from client data)
   - Only show custom (non-client) placeholders for user input

2. **Maintain Existing UI/UX**:
   - Keep the same user interface and workflow
   - Preserve all form validation and field types
   - Maintain multi-step processes if they exist

3. **Document Generation Update**:
   - Update any document generation calls to use DocxtemplaterService
   - Handle DOCX downloads instead of HTML/JSON responses
   - Pass both client data and custom field values

4. **Backward Compatibility**:
   - Handle templates that might still have old `custom_fields` format
   - Gracefully fallback if `detected_placeholders` is empty

### Implementation Pattern (From DocumentGeneratorModal Example):
```javascript
// 1. Get custom fields from detected placeholders
const customFields = template ? getCustomPlaceholders(template.detected_placeholders) : []
const hasCustomFields = customFields.length > 0

// 2. Use existing form components but with new data source
<CustomFieldsForm
  customFields={customFields} // Derived from detected_placeholders
  values={customFieldValues}
  onFieldsChange={setCustomFieldValues}
/>

// 3. Updated document generation
const response = await fetch('/api/documents/generate', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    templateId: template.id,
    clientId: selectedClientId,
    customFieldValues: customFieldValues
  })
})

// Handle DOCX download
const blob = await response.blob()
const url = window.URL.createObjectURL(blob)
// Trigger download...
```

### Files to Update:
- Any Tasks components that reference `template.custom_fields`
- Any document generation logic in Tasks feature
- Any form components handling template placeholders
- API calls that generate documents from tasks

### Key Changes Needed:
1. Import and use `getCustomPlaceholders` from `/lib/utils/clientFields`
2. Replace `template.custom_fields` with `getCustomPlaceholders(template.detected_placeholders)`
3. Update document generation API calls to use new endpoint
4. Handle DOCX file downloads instead of HTML responses
5. Ensure client fields are excluded from user input forms

### Success Criteria:
- Tasks feature works with new DOCX templates
- Only custom (non-client) placeholders require user input
- Document generation produces DOCX files with perfect formatting
- All existing Tasks functionality is preserved
- No breaking changes to user experience

Please analyze the Tasks feature code and implement these changes while maintaining all existing functionality.